/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef rpc_TYPES_H
#define rpc_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace communication {

typedef struct _Point__isset {
  _Point__isset() : x(false), y(false), z(false) {}
  bool x;
  bool y;
  bool z;
} _Point__isset;

class Point {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  Point() : x(0), y(0), z(0) {
  }

  virtual ~Point() throw() {}

  int32_t x;
  int32_t y;
  int32_t z;

  _Point__isset __isset;

  void __set_x(const int32_t val) {
    x = val;
  }

  void __set_y(const int32_t val) {
    y = val;
  }

  void __set_z(const int32_t val) {
    z = val;
  }

  bool operator == (const Point & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const Point &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Point & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PointCloud__isset {
  _PointCloud__isset() : points(false) {}
  bool points;
} _PointCloud__isset;

class PointCloud {
 public:

  static const char* ascii_fingerprint; // = "472B8583FB07D1D9EA40FEBBDE10B800";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0x2B,0x85,0x83,0xFB,0x07,0xD1,0xD9,0xEA,0x40,0xFE,0xBB,0xDE,0x10,0xB8,0x00};

  PointCloud() {
  }

  virtual ~PointCloud() throw() {}

  std::vector<Point>  points;

  _PointCloud__isset __isset;

  void __set_points(const std::vector<Point> & val) {
    points = val;
  }

  bool operator == (const PointCloud & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const PointCloud &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PointCloud & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
