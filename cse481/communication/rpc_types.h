/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef rpc_TYPES_H
#define rpc_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace communication {

typedef struct _Point__isset {
  _Point__isset() : x(false), y(false), z(false) {}
  bool x;
  bool y;
  bool z;
} _Point__isset;

class Point {
 public:

  static const char* ascii_fingerprint; // = "EFFAD640FBA2CA56C50155B2A4545897";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xFA,0xD6,0x40,0xFB,0xA2,0xCA,0x56,0xC5,0x01,0x55,0xB2,0xA4,0x54,0x58,0x97};

  Point() : x(0), y(0), z(0) {
  }

  virtual ~Point() throw() {}

  double x;
  double y;
  double z;

  _Point__isset __isset;

  void __set_x(const double val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  void __set_z(const double val) {
    z = val;
  }

  bool operator == (const Point & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const Point &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Point & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PointCloud__isset {
  _PointCloud__isset() : points(false), average(false), identifier(false) {}
  bool points;
  bool average;
  bool identifier;
} _PointCloud__isset;

class PointCloud {
 public:

  static const char* ascii_fingerprint; // = "DB516E1F88886FFE4164E5FDD3EBF640";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0x51,0x6E,0x1F,0x88,0x88,0x6F,0xFE,0x41,0x64,0xE5,0xFD,0xD3,0xEB,0xF6,0x40};

  PointCloud() : identifier("") {
  }

  virtual ~PointCloud() throw() {}

  std::vector<Point>  points;
  Point average;
  std::string identifier;

  _PointCloud__isset __isset;

  void __set_points(const std::vector<Point> & val) {
    points = val;
  }

  void __set_average(const Point& val) {
    average = val;
  }

  void __set_identifier(const std::string& val) {
    identifier = val;
  }

  bool operator == (const PointCloud & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    if (!(average == rhs.average))
      return false;
    if (!(identifier == rhs.identifier))
      return false;
    return true;
  }
  bool operator != (const PointCloud &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PointCloud & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
