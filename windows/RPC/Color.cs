/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Communication
{

  [Serializable]
  public partial class Color : TBase
  {
    private int _r;
    private int _g;
    private int _b;

    public int R
    {
      get
      {
        return _r;
      }
      set
      {
        __isset.r = true;
        this._r = value;
      }
    }

    public int G
    {
      get
      {
        return _g;
      }
      set
      {
        __isset.g = true;
        this._g = value;
      }
    }

    public int B
    {
      get
      {
        return _b;
      }
      set
      {
        __isset.b = true;
        this._b = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool r;
      public bool g;
      public bool b;
    }

    public Color() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              R = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              G = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              B = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Color");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.r) {
        field.Name = "r";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(R);
        oprot.WriteFieldEnd();
      }
      if (__isset.g) {
        field.Name = "g";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(G);
        oprot.WriteFieldEnd();
      }
      if (__isset.b) {
        field.Name = "b";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(B);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Color(");
      sb.Append("R: ");
      sb.Append(R);
      sb.Append(",G: ");
      sb.Append(G);
      sb.Append(",B: ");
      sb.Append(B);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
