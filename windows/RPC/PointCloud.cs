/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Communication
{

  [Serializable]
  public partial class PointCloud : TBase
  {
    private List<Point> _points;
    private Point _average;
    private string _identifier;
    private Color _color;

    public List<Point> Points
    {
      get
      {
        return _points;
      }
      set
      {
        __isset.points = true;
        this._points = value;
      }
    }

    public Point Average
    {
      get
      {
        return _average;
      }
      set
      {
        __isset.average = true;
        this._average = value;
      }
    }

    public string Identifier
    {
      get
      {
        return _identifier;
      }
      set
      {
        __isset.identifier = true;
        this._identifier = value;
      }
    }

    public Color Color
    {
      get
      {
        return _color;
      }
      set
      {
        __isset.color = true;
        this._color = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool points;
      public bool average;
      public bool identifier;
      public bool color;
    }

    public PointCloud() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Points = new List<Point>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  Point _elem2 = new Point();
                  _elem2 = new Point();
                  _elem2.Read(iprot);
                  Points.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Average = new Point();
              Average.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Identifier = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Color = new Color();
              Color.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PointCloud");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Points != null && __isset.points) {
        field.Name = "points";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Points.Count));
          foreach (Point _iter3 in Points)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Average != null && __isset.average) {
        field.Name = "average";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Average.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Identifier != null && __isset.identifier) {
        field.Name = "identifier";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Identifier);
        oprot.WriteFieldEnd();
      }
      if (Color != null && __isset.color) {
        field.Name = "color";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Color.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PointCloud(");
      sb.Append("Points: ");
      sb.Append(Points);
      sb.Append(",Average: ");
      sb.Append(Average== null ? "<null>" : Average.ToString());
      sb.Append(",Identifier: ");
      sb.Append(Identifier);
      sb.Append(",Color: ");
      sb.Append(Color== null ? "<null>" : Color.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
